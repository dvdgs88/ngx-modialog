import { arrayUnion, extend } from '../../../framework/utils';
import { privateKey, setAssignAlias } from '../../../framework/fluent-assign';
import { BSMessageModal } from '../message-modal.component';
import { BSModalContextBuilder } from '../modal-context';
const DEFAULT_VALUES = {
    component: BSMessageModal,
    headerClass: 'modal-header',
    bodyClass: 'modal-body',
    footerClass: 'modal-footer'
};
const DEFAULT_SETTERS = [
    'headerClass',
    'title',
    'titleHtml',
    'bodyClass',
    'footerClass'
];
/**
 * A Preset representing the configuration needed to open MessageModal.
 * This is an abstract implementation with no concrete behaviour.
 * Use derived implementation.
 */
export class MessageModalPresetBuilder extends BSModalContextBuilder {
    constructor(defaultValues, initialSetters, baseType) {
        super(extend(extend({ buttons: [] }, DEFAULT_VALUES), defaultValues || {}), arrayUnion(DEFAULT_SETTERS, initialSetters || []), baseType);
        setAssignAlias(this, 'body', 'message', true);
    }
    addButton(css, caption, onClick) {
        const btn = {
            cssClass: css,
            caption: caption,
            onClick: onClick
        };
        const key = privateKey('buttons');
        this[key].push(btn);
        return this;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWVzc2FnZS1tb2RhbC1wcmVzZXQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9uZ3gtbW9kaWFsb2cvc3JjL2xpYi9wbHVnaW5zL2Jvb3RzdHJhcC9wcmVzZXRzL21lc3NhZ2UtbW9kYWwtcHJlc2V0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDOUQsT0FBTyxFQUFzQixVQUFVLEVBQUUsY0FBYyxFQUFFLE1BQU0sa0NBQWtDLENBQUM7QUFDbEcsT0FBTyxFQUNMLGNBQWMsRUFHZixNQUFNLDRCQUE0QixDQUFDO0FBQ3BDLE9BQU8sRUFBa0IscUJBQXFCLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUd6RSxNQUFNLGNBQWMsR0FBRztJQUNyQixTQUFTLEVBQUUsY0FBYztJQUN6QixXQUFXLEVBQUUsY0FBYztJQUMzQixTQUFTLEVBQUUsWUFBWTtJQUN2QixXQUFXLEVBQUUsY0FBYztDQUM1QixDQUFDO0FBRUYsTUFBTSxlQUFlLEdBQUc7SUFDdEIsYUFBYTtJQUNiLE9BQU87SUFDUCxXQUFXO0lBQ1gsV0FBVztJQUNYLGFBQWE7Q0FDZCxDQUFDO0FBNERGOzs7O0dBSUc7QUFDSCxNQUFNLE9BQWdCLHlCQUNwQixTQUFRLHFCQUF3QjtJQWtEaEMsWUFBWSxhQUFpQixFQUNqQixjQUF5QixFQUN6QixRQUFzQjtRQUNoQyxLQUFLLENBQ0gsTUFBTSxDQUFNLE1BQU0sQ0FBQyxFQUFDLE9BQU8sRUFBRSxFQUFFLEVBQUMsRUFBRSxjQUFjLENBQUMsRUFBRSxhQUFhLElBQUksRUFBRSxDQUFDLEVBQ3ZFLFVBQVUsQ0FBUyxlQUFlLEVBQUUsY0FBYyxJQUFJLEVBQUUsQ0FBQyxFQUN6RCxRQUFRLENBQ1QsQ0FBQztRQUVGLGNBQWMsQ0FBQyxJQUFJLEVBQUUsTUFBTSxFQUFFLFNBQVMsRUFBRSxJQUFJLENBQUMsQ0FBQztJQUNoRCxDQUFDO0lBRUQsU0FBUyxDQUFDLEdBQVcsRUFBRSxPQUFlLEVBQUUsT0FBb0M7UUFDMUUsTUFBTSxHQUFHLEdBQUc7WUFDVixRQUFRLEVBQUUsR0FBRztZQUNiLE9BQU8sRUFBRSxPQUFPO1lBQ2hCLE9BQU8sRUFBRSxPQUFPO1NBQ2pCLENBQUM7UUFFRixNQUFNLEdBQUcsR0FBRyxVQUFVLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDakMsSUFBSSxDQUFDLEdBQUcsQ0FBa0MsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7UUFFdEQsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0NBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJcbmltcG9ydCB7IGFycmF5VW5pb24sIGV4dGVuZCB9IGZyb20gJy4uLy4uLy4uL2ZyYW1ld29yay91dGlscyc7XG5pbXBvcnQgeyBGbHVlbnRBc3NpZ25NZXRob2QsIHByaXZhdGVLZXksIHNldEFzc2lnbkFsaWFzIH0gZnJvbSAnLi4vLi4vLi4vZnJhbWV3b3JrL2ZsdWVudC1hc3NpZ24nO1xuaW1wb3J0IHtcbiAgQlNNZXNzYWdlTW9kYWwsXG4gIEJTTWVzc2FnZU1vZGFsQnV0dG9uQ29uZmlnLFxuICBCU01lc3NhZ2VNb2RhbEJ1dHRvbkhhbmRsZXJcbn0gZnJvbSAnLi4vbWVzc2FnZS1tb2RhbC5jb21wb25lbnQnO1xuaW1wb3J0IHsgQlNNb2RhbENvbnRleHQsIEJTTW9kYWxDb250ZXh0QnVpbGRlciB9IGZyb20gJy4uL21vZGFsLWNvbnRleHQnO1xuXG5cbmNvbnN0IERFRkFVTFRfVkFMVUVTID0ge1xuICBjb21wb25lbnQ6IEJTTWVzc2FnZU1vZGFsLFxuICBoZWFkZXJDbGFzczogJ21vZGFsLWhlYWRlcicsXG4gIGJvZHlDbGFzczogJ21vZGFsLWJvZHknLFxuICBmb290ZXJDbGFzczogJ21vZGFsLWZvb3Rlcidcbn07XG5cbmNvbnN0IERFRkFVTFRfU0VUVEVSUyA9IFtcbiAgJ2hlYWRlckNsYXNzJyxcbiAgJ3RpdGxlJyxcbiAgJ3RpdGxlSHRtbCcsXG4gICdib2R5Q2xhc3MnLFxuICAnZm9vdGVyQ2xhc3MnXG5dO1xuXG5cbi8qKlxuICogRGF0YSBkZWZpbml0aW9uXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgTWVzc2FnZU1vZGFsUHJlc2V0IGV4dGVuZHMgQlNNb2RhbENvbnRleHQge1xuXG4gIC8qKlxuICAgKiBBIENsYXNzIGZvciB0aGUgaGVhZGVyICh0aXRsZSkgY29udGFpbmVyLlxuICAgKiBEZWZhdWx0OiBtb2RhbC1oZWFkZXJcbiAgICovXG4gIGhlYWRlckNsYXNzOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIENhcHRpb24gZm9yIHRoZSB0aXRsZSwgZW5jbG9zZWQgaW4gYSBIMyBjb250YWluZXIuXG4gICAqL1xuICB0aXRsZTogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBIVE1MIGZvciB0aGUgdGl0bGUsIGlmIHNldCBvdmVycmlkZXMgdGl0bGUgcHJvcGVydHkuXG4gICAqIFRoZSBIVE1MIGlzIHdyYXBwZWQgaW4gYSBESVYgZWxlbWVudCwgaW5zaWRlIHRoZSBoZWFkZXIgY29udGFpbmVyLlxuICAgKiBFeGFtcGxlOlxuICAgPGRpdiBjbGFzcz1cIm1vZGFsLWhlYWRlclwiPlxuICAgPGRpdj4gSFRNTCBDT05URU5UIElOU0VSVEVEIEhFUkUgPC9kaXY+XG4gICA8L2Rpdj5cbiAgICogTm90ZTogSFRNTCBpcyBub3QgY29tcGlsZWQuXG4gICAqL1xuICB0aXRsZUh0bWw6IHN0cmluZztcblxuICAvKipcbiAgICogYWxpYXNlZCBieSAnYm9keSdcbiAgICogQGFsaWFzZWRCeSBib2R5XG4gICAqL1xuICBtZXNzYWdlOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFRoZSBib2R5IG9mIHRoZSBtb2RhbC5cbiAgICogQ2FuIGJlIGVpdGhlciB0ZXh0IG9yIEhUTUwuXG4gICAqIE5vdGU6IFdoZW4gdXNpbmcgSFRNTCwgdGhlIHRlbXBsYXRlIGlzIG5vdCBjb21waWxlZC4gKGJpbmRpbmcgYW5kIGV4cHJlc3Npb24gd2lsbCBub3QgcGFyc2UpXG4gICAqIEBhbGlhc09mIG1lc3NhZ2VcbiAgICovXG4gIGJvZHk6IHN0cmluZztcblxuICAvKipcbiAgICogQSBDbGFzcyBmb3IgdGhlIGJvZHkgY29udGFpbmVyLlxuICAgKiBEZWZhdWx0OiBtb2RhbC1ib2R5XG4gICAqL1xuICBib2R5Q2xhc3M6IHN0cmluZztcblxuICAvKipcbiAgICogQSBDbGFzcyBmb3IgdGhlIGZvb3RlciBjb250YWluZXIuXG4gICAqIERlZmF1bHQ6IG1vZGFsLWZvb3RlclxuICAgKi9cbiAgZm9vdGVyQ2xhc3M6IHN0cmluZztcblxuICBidXR0b25zOiBCU01lc3NhZ2VNb2RhbEJ1dHRvbkNvbmZpZ1tdO1xuICBzaG93SW5wdXQ/OiBhbnk7XG59XG5cbi8qKlxuICogQSBQcmVzZXQgcmVwcmVzZW50aW5nIHRoZSBjb25maWd1cmF0aW9uIG5lZWRlZCB0byBvcGVuIE1lc3NhZ2VNb2RhbC5cbiAqIFRoaXMgaXMgYW4gYWJzdHJhY3QgaW1wbGVtZW50YXRpb24gd2l0aCBubyBjb25jcmV0ZSBiZWhhdmlvdXIuXG4gKiBVc2UgZGVyaXZlZCBpbXBsZW1lbnRhdGlvbi5cbiAqL1xuZXhwb3J0IGFic3RyYWN0IGNsYXNzIE1lc3NhZ2VNb2RhbFByZXNldEJ1aWxkZXI8VCBleHRlbmRzIE1lc3NhZ2VNb2RhbFByZXNldD5cbiAgZXh0ZW5kcyBCU01vZGFsQ29udGV4dEJ1aWxkZXI8VD4ge1xuXG4gIC8qKlxuICAgKiBBIENsYXNzIGZvciB0aGUgaGVhZGVyICh0aXRsZSkgY29udGFpbmVyLlxuICAgKiBEZWZhdWx0OiBtb2RhbC1oZWFkZXJcbiAgICovXG4gIGhlYWRlckNsYXNzOiBGbHVlbnRBc3NpZ25NZXRob2Q8c3RyaW5nLCB0aGlzPjtcblxuICAvKipcbiAgICogQ2FwdGlvbiBmb3IgdGhlIHRpdGxlLCBlbmNsb3NlZCBpbiBhIEgzIGNvbnRhaW5lci5cbiAgICovXG4gIHRpdGxlOiBGbHVlbnRBc3NpZ25NZXRob2Q8c3RyaW5nLCB0aGlzPjtcblxuICAvKipcbiAgICogSFRNTCBmb3IgdGhlIHRpdGxlLCBpZiBzZXQgb3ZlcnJpZGVzIHRpdGxlIHByb3BlcnR5LlxuICAgKiBUaGUgSFRNTCBpcyB3cmFwcGVkIGluIGEgRElWIGVsZW1lbnQsIGluc2lkZSB0aGUgaGVhZGVyIGNvbnRhaW5lci5cbiAgICogRXhhbXBsZTpcbiAgIDxkaXYgY2xhc3M9XCJtb2RhbC1oZWFkZXJcIj5cbiAgIDxkaXY+IEhUTUwgQ09OVEVOVCBJTlNFUlRFRCBIRVJFIDwvZGl2PlxuICAgPC9kaXY+XG4gICAqIE5vdGU6IEhUTUwgaXMgbm90IGNvbXBpbGVkLlxuICAgKi9cbiAgdGl0bGVIdG1sOiBGbHVlbnRBc3NpZ25NZXRob2Q8c3RyaW5nLCB0aGlzPjtcblxuICAvKipcbiAgICogYWxpYXNlZCBieSAnYm9keSdcbiAgICogQGFsaWFzZWRCeSBib2R5XG4gICAqL1xuICBtZXNzYWdlOiBGbHVlbnRBc3NpZ25NZXRob2Q8c3RyaW5nLCB0aGlzPjtcblxuICAvKipcbiAgICogVGhlIGJvZHkgb2YgdGhlIG1vZGFsLlxuICAgKiBDYW4gYmUgZWl0aGVyIHRleHQgb3IgSFRNTC5cbiAgICogTm90ZTogV2hlbiB1c2luZyBIVE1MLCB0aGUgdGVtcGxhdGUgaXMgbm90IGNvbXBpbGVkLiAoYmluZGluZyBhbmQgZXhwcmVzc2lvbiB3aWxsIG5vdCBwYXJzZSlcbiAgICogQGFsaWFzT2YgbWVzc2FnZVxuICAgKi9cbiAgYm9keTogRmx1ZW50QXNzaWduTWV0aG9kPHN0cmluZywgdGhpcz47XG5cbiAgLyoqXG4gICAqIEEgQ2xhc3MgZm9yIHRoZSBib2R5IGNvbnRhaW5lci5cbiAgICogRGVmYXVsdDogbW9kYWwtYm9keVxuICAgKi9cbiAgYm9keUNsYXNzOiBGbHVlbnRBc3NpZ25NZXRob2Q8c3RyaW5nLCB0aGlzPjtcblxuICAvKipcbiAgICogQSBDbGFzcyBmb3IgdGhlIGZvb3RlciBjb250YWluZXIuXG4gICAqIERlZmF1bHQ6IG1vZGFsLWZvb3RlclxuICAgKi9cbiAgZm9vdGVyQ2xhc3M6IEZsdWVudEFzc2lnbk1ldGhvZDxzdHJpbmcsIHRoaXM+O1xuXG4gIGNvbnN0cnVjdG9yKGRlZmF1bHRWYWx1ZXM/OiBULFxuICAgICAgICAgICAgICBpbml0aWFsU2V0dGVycz86IHN0cmluZ1tdLFxuICAgICAgICAgICAgICBiYXNlVHlwZT86IG5ldyAoKSA9PiBUKSB7XG4gICAgc3VwZXIoXG4gICAgICBleHRlbmQ8YW55PihleHRlbmQoe2J1dHRvbnM6IFtdfSwgREVGQVVMVF9WQUxVRVMpLCBkZWZhdWx0VmFsdWVzIHx8IHt9KSxcbiAgICAgIGFycmF5VW5pb248c3RyaW5nPihERUZBVUxUX1NFVFRFUlMsIGluaXRpYWxTZXR0ZXJzIHx8IFtdKSxcbiAgICAgIGJhc2VUeXBlXG4gICAgKTtcblxuICAgIHNldEFzc2lnbkFsaWFzKHRoaXMsICdib2R5JywgJ21lc3NhZ2UnLCB0cnVlKTtcbiAgfVxuXG4gIGFkZEJ1dHRvbihjc3M6IHN0cmluZywgY2FwdGlvbjogc3RyaW5nLCBvbkNsaWNrOiBCU01lc3NhZ2VNb2RhbEJ1dHRvbkhhbmRsZXIpOiB0aGlzIHtcbiAgICBjb25zdCBidG4gPSB7XG4gICAgICBjc3NDbGFzczogY3NzLFxuICAgICAgY2FwdGlvbjogY2FwdGlvbixcbiAgICAgIG9uQ2xpY2s6IG9uQ2xpY2tcbiAgICB9O1xuXG4gICAgY29uc3Qga2V5ID0gcHJpdmF0ZUtleSgnYnV0dG9ucycpO1xuICAgICh0aGlzW2tleV0gYXMgQlNNZXNzYWdlTW9kYWxCdXR0b25Db25maWdbXSkucHVzaChidG4pO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbn1cbiJdfQ==